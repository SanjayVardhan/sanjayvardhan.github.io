<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spektre's Blog</title><link>https://www.sanjayvardhan.github.io/</link><description>Recent content on spektre's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 02 Feb 2025 16:42:02 +0530</lastBuildDate><atom:link href="https://www.sanjayvardhan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://www.sanjayvardhan.github.io/about/</link><pubDate>Sun, 02 Feb 2025 16:42:02 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/about/</guid><description>&lt;p>I&amp;rsquo;m Sanjay Vardhan, a Final Year CS Undergrad at Amrita University, Amritapuri Campus.&lt;/p>
&lt;p>I like systems security, low-level development and exploitation. I&amp;rsquo;m an active CTF player and Team Lead @teambi0s. My current skills include linux userspace exploitation (stack and heap-based) and browser exploitation (V8, JSC).&lt;/p></description></item><item><title>CTFZone Quals 2024 - Wasminator</title><link>https://www.sanjayvardhan.github.io/post/wasminator/</link><pubDate>Thu, 22 Aug 2024 16:55:07 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/wasminator/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I tried this challenge during the CTF but wasnt able to solve it. The challenge had 0 solves in the end. So I tried solving it after the CTF ended.&lt;/p>
&lt;h2 id="patch-analysis">Patch Analysis&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-patch=" data-lang="patch=">diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 71c4b37adcc..0f670bdd7d1 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -2228,8 +2228,9 @@ Maybe&amp;lt;bool&amp;gt; Object::SetPropertyInternal(LookupIterator* it,
 }
 
 case LookupIterator::WASM_OBJECT:
- RETURN_FAILURE(it-&amp;gt;isolate(), kThrowOnError,
- NewTypeError(MessageTemplate::kWasmObjectsAreOpaque));
+ //RETURN_FAILURE(it-&amp;gt;isolate(), kThrowOnError,
+ // NewTypeError(MessageTemplate::kWasmObjectsAreOpaque));
+ return SetDataProperty(it, value);
 
 case LookupIterator::INTERCEPTOR: {
 if (it-&amp;gt;HolderIsReceiverOrHiddenPrototype()) {
&lt;/code>&lt;/pre>&lt;p>With this patch, instead of returning a failure and throwing a &lt;code>TypeError&lt;/code> indicating that WASM objects are opaque, the code now calls &lt;code>SetDataProperty(it, value)&lt;/code>, allowing us to modify the properties of the &lt;code>WASM_OBJECT&lt;/code>.&lt;/p></description></item><item><title>IrisCTF 2024 - Sequilitis</title><link>https://www.sanjayvardhan.github.io/post/irisctf_sequilitis/</link><pubDate>Sat, 13 Jan 2024 14:02:58 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/irisctf_sequilitis/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>I played IrisCTF last week and found Sequilitis really interesting. Although I wasn&amp;rsquo;t able to solve it during the CTF, I worked on it afterward. The challenge uses the SQLite3 engine, so we need to understand SQLite3 internals before diving into the challenge.&lt;/p>
&lt;h3 id="sqlite3-internals">Sqlite3 Internals&lt;/h3>
&lt;p>SQLite3 uses a bytecode engine. First, it translates SQL statements into bytecode, and then the generated bytecode runs in a VM. Each instruction is 24 bytes, i.e., 6 ints. The opcode takes the first 4 bytes, and the arguments take the rest. To take a look at the bytecode, we can use the &lt;code>Explain&lt;/code> keyword, which gives us the bytecode of the SQL statement instead of executing it in the VM.&lt;/p></description></item><item><title>V8 Internals - Understanding V8 Compiler Pipeline</title><link>https://www.sanjayvardhan.github.io/post/v8-internals-1/v8_internals_1/</link><pubDate>Tue, 02 Jan 2024 06:32:41 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/v8-internals-1/v8_internals_1/</guid><description>&lt;h1 id="understanding-v8s-compiler-pipeline">Understanding V8&amp;rsquo;s Compiler Pipeline&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>V8 is the JavaScript engine powering browsers like Google Chrome, Brave, and Microsoft Edge. This series of blog posts will go into the internals of V8. This first part will be giving an overview of the V8 Compiler Pipeline.&lt;/p>
&lt;h2 id="compiler-pipeline">Compiler Pipeline&lt;/h2>
&lt;p>&lt;img src="V8_Internals_1/Untitled-2023-08-13-1007.png" alt="Pipeline">&lt;/p>
&lt;h3 id="high-level-overview-the-life-cycle-of-a-javascript-source-in-the-v8-engine">High-Level Overview: The Life Cycle of a JavaScript Source in the V8 Engine&lt;/h3>
&lt;p>Just-In-Time (JIT) Compilation involves executing bytecode through an interpreter VM, which is slower than running machine code directly. Most compilers, including V8, follow a similar initial compilation pipeline:&lt;/p></description></item><item><title>The Holy Hole - Analysis of CVE-2023-2033</title><link>https://www.sanjayvardhan.github.io/post/cve-2023-2033/</link><pubDate>Tue, 02 Jan 2024 06:24:00 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/cve-2023-2033/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>I have been following v8 exploits related to hole for sometime now and I found CVE-2023-2033 really interesting. So I thought documenting whatever I learn while doing the analysis of this CVE will help me understand it even better.&lt;/p>
&lt;h3 id="hole">Hole&lt;/h3>
&lt;p>Generally in JavaScript, A Hole to an empty slot in an array. These holes are different from &lt;code>undefined&lt;/code> or &lt;code>null&lt;/code> values, which are actual values that can be assigned to array elements.&lt;/p></description></item><item><title>Notes on CVE-2016-4622</title><link>https://www.sanjayvardhan.github.io/post/cve-2016-4622/</link><pubDate>Sun, 16 Apr 2023 06:19:43 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/cve-2016-4622/</guid><description>&lt;h2 id="bug-analysis">Bug Analysis&lt;/h2>
&lt;p>The vulnerability is present in the implementation of ArrayProtoSlice.&lt;/p>
&lt;p>first, let us see what is slice method and how it works.&lt;/p>
&lt;p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; var array &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;d&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>undefined
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; array.slice&lt;span style="color:#f92672">(&lt;/span>1,4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,c,d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let us take a look at the implementation (slightly commented) of ArrayProtoSlice.&lt;/p></description></item><item><title>bi0sCTF22 - n0tes</title><link>https://www.sanjayvardhan.github.io/post/bi0sctf22_n0tes/</link><pubDate>Tue, 24 Jan 2023 05:01:57 +0000</pubDate><guid>https://www.sanjayvardhan.github.io/post/bi0sctf22_n0tes/</guid><description>&lt;p>&lt;strong>tl;dr&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Double fetch race Condition in store_note function.&lt;/li>
&lt;li>overwrite size during race window to get buffer overflow.&lt;/li>
&lt;li>Do SROP for execve(&amp;quot;/bin/sh\x00&amp;quot;)&lt;/li>
&lt;/ul></description></item></channel></rss>