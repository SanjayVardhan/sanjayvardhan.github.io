<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF Writeup on spektre's Blog</title><link>https://www.sanjayvardhan.github.io/categories/ctf-writeup/</link><description>Recent content in CTF Writeup on spektre's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 22 Aug 2024 16:55:07 +0530</lastBuildDate><atom:link href="https://www.sanjayvardhan.github.io/categories/ctf-writeup/index.xml" rel="self" type="application/rss+xml"/><item><title>CTFZone Quals 2024 - Wasminator</title><link>https://www.sanjayvardhan.github.io/post/wasminator/</link><pubDate>Thu, 22 Aug 2024 16:55:07 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/wasminator/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I tried this challenge during the CTF but wasnt able to solve it. The challenge had 0 solves in the end. So I tried solving it after the CTF ended.&lt;/p>
&lt;h2 id="patch-analysis">Patch Analysis&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-patch=" data-lang="patch=">diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 71c4b37adcc..0f670bdd7d1 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -2228,8 +2228,9 @@ Maybe&amp;lt;bool&amp;gt; Object::SetPropertyInternal(LookupIterator* it,
 }
 
 case LookupIterator::WASM_OBJECT:
- RETURN_FAILURE(it-&amp;gt;isolate(), kThrowOnError,
- NewTypeError(MessageTemplate::kWasmObjectsAreOpaque));
+ //RETURN_FAILURE(it-&amp;gt;isolate(), kThrowOnError,
+ // NewTypeError(MessageTemplate::kWasmObjectsAreOpaque));
+ return SetDataProperty(it, value);
 
 case LookupIterator::INTERCEPTOR: {
 if (it-&amp;gt;HolderIsReceiverOrHiddenPrototype()) {
&lt;/code>&lt;/pre>&lt;p>With this patch, instead of returning a failure and throwing a &lt;code>TypeError&lt;/code> indicating that WASM objects are opaque, the code now calls &lt;code>SetDataProperty(it, value)&lt;/code>, allowing us to modify the properties of the &lt;code>WASM_OBJECT&lt;/code>.&lt;/p></description></item><item><title>IrisCTF 2024 - Sequilitis</title><link>https://www.sanjayvardhan.github.io/post/irisctf_sequilitis/</link><pubDate>Sat, 13 Jan 2024 14:02:58 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/irisctf_sequilitis/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>I played IrisCTF last week and found Sequilitis really interesting. Although I wasn&amp;rsquo;t able to solve it during the CTF, I worked on it afterward. The challenge uses the SQLite3 engine, so we need to understand SQLite3 internals before diving into the challenge.&lt;/p>
&lt;h3 id="sqlite3-internals">Sqlite3 Internals&lt;/h3>
&lt;p>SQLite3 uses a bytecode engine. First, it translates SQL statements into bytecode, and then the generated bytecode runs in a VM. Each instruction is 24 bytes, i.e., 6 ints. The opcode takes the first 4 bytes, and the arguments take the rest. To take a look at the bytecode, we can use the &lt;code>Explain&lt;/code> keyword, which gives us the bytecode of the SQL statement instead of executing it in the VM.&lt;/p></description></item><item><title>bi0sCTF22 - n0tes</title><link>https://www.sanjayvardhan.github.io/post/bi0sctf22_n0tes/</link><pubDate>Tue, 24 Jan 2023 05:01:57 +0000</pubDate><guid>https://www.sanjayvardhan.github.io/post/bi0sctf22_n0tes/</guid><description>&lt;p>&lt;strong>tl;dr&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Double fetch race Condition in store_note function.&lt;/li>
&lt;li>overwrite size during race window to get buffer overflow.&lt;/li>
&lt;li>Do SROP for execve(&amp;quot;/bin/sh\x00&amp;quot;)&lt;/li>
&lt;/ul></description></item></channel></rss>