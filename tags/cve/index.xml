<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CVE on spektre's Blog</title><link>https://www.sanjayvardhan.github.io/tags/cve/</link><description>Recent content in CVE on spektre's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 02 Jan 2024 06:24:00 +0530</lastBuildDate><atom:link href="https://www.sanjayvardhan.github.io/tags/cve/index.xml" rel="self" type="application/rss+xml"/><item><title>The Holy Hole - Analysis of CVE-2023-2033</title><link>https://www.sanjayvardhan.github.io/post/cve-2023-2033/</link><pubDate>Tue, 02 Jan 2024 06:24:00 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/cve-2023-2033/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>I have been following v8 exploits related to hole for sometime now and I found CVE-2023-2033 really interesting. So I thought documenting whatever I learn while doing the analysis of this CVE will help me understand it even better.&lt;/p>
&lt;h3 id="hole">Hole&lt;/h3>
&lt;p>Generally in JavaScript, A Hole to an empty slot in an array. These holes are different from &lt;code>undefined&lt;/code> or &lt;code>null&lt;/code> values, which are actual values that can be assigned to array elements.&lt;/p></description></item><item><title>Notes on CVE-2016-4622</title><link>https://www.sanjayvardhan.github.io/post/cve-2016-4622/</link><pubDate>Sun, 16 Apr 2023 06:19:43 +0530</pubDate><guid>https://www.sanjayvardhan.github.io/post/cve-2016-4622/</guid><description>&lt;h2 id="bug-analysis">Bug Analysis&lt;/h2>
&lt;p>The vulnerability is present in the implementation of ArrayProtoSlice.&lt;/p>
&lt;p>first, let us see what is slice method and how it works.&lt;/p>
&lt;p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; var array &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;d&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>undefined
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; array.slice&lt;span style="color:#f92672">(&lt;/span>1,4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,c,d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let us take a look at the implementation (slightly commented) of ArrayProtoSlice.&lt;/p></description></item></channel></rss>