<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Analysis on spektre</title>
        <link>https://sanjayvardhan.github.io/tags/analysis/</link>
        <description>Recent content in Analysis on spektre</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 02 Jan 2024 06:24:00 +0530</lastBuildDate><atom:link href="https://sanjayvardhan.github.io/tags/analysis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>The Holy Hole - Analysis of CVE-2023-2033</title>
        <link>https://sanjayvardhan.github.io/posts/the-holy-hole-analysis-of-cve-2023-2033/</link>
        <pubDate>Tue, 02 Jan 2024 06:24:00 +0530</pubDate>
        
        <guid>https://sanjayvardhan.github.io/posts/the-holy-hole-analysis-of-cve-2023-2033/</guid>
        <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I have been following v8 exploits related to hole for sometime now and I found CVE-2023-2033 really interesting. So I thought documenting whatever I learn while doing the analysis of this CVE will help me understand it even better.&lt;/p&gt;
&lt;h3 id=&#34;hole&#34;&gt;Hole&lt;/h3&gt;
&lt;p&gt;Generally in JavaScript, A Hole to an empty slot in an array. These holes are different from &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values, which are actual values that can be assigned to array elements.&lt;/p&gt;
&lt;p&gt;For example, if you create an array like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The array &lt;code&gt;arr&lt;/code&gt; will have two &lt;code&gt;holes&lt;/code&gt; at the end.&lt;/p&gt;
&lt;p&gt;Now lets see how this looks like in v8,
We can use &lt;code&gt;%DebugPrint(arr)&lt;/code&gt; so get debug information of the array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;d8&amp;gt; %DebugPrint&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
DebugPrint: 0x38ae001c9415: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;JSArray&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 - map: 0x38ae000cef71 &amp;lt;Map&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;16&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;HOLEY_SMI_ELEMENTS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;FastProperties&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 - prototype: 0x38ae000ce925 &amp;lt;JSArray&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt;
 - elements: 0x38ae001cb0fd &amp;lt;FixedArray&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;20&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;HOLEY_SMI_ELEMENTS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
 - length: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
 - properties: 0x38ae000006cd &amp;lt;FixedArray&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt;
 - All own properties &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;excluding elements&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    0x38ae00000d41: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;String&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; in ReadOnlySpace: &lt;span class=&#34;c1&#34;&gt;#length: 0x38ae0030f6f9 &amp;lt;AccessorInfo name= 0x38ae00000d41 &amp;lt;String[6]: #length&amp;gt;, data= 0x38ae00000061 &amp;lt;undefined&amp;gt;&amp;gt; (const accessor descriptor), location: descriptor&lt;/span&gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
 - elements: 0x38ae001cb0fd &amp;lt;FixedArray&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;20&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
           0: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
           1: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
           2: &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
        3-19: 0x38ae000006e9 &amp;lt;the_hole_value&amp;gt;
 &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
0x38ae000cef71: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Map&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; in OldSpace
 - map: 0x38ae000c3c29 &amp;lt;MetaMap &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x38ae000c3c79 &amp;lt;NativeContext&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;285&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;
 - type: JS_ARRAY_TYPE
 - instance size: &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
 - inobject properties: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
 - unused property fields: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
 - elements kind: HOLEY_SMI_ELEMENTS
 - enum length: invalid
 - back pointer: 0x38ae000ce6b1 &amp;lt;Map&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;16&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;PACKED_SMI_ELEMENTS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;
 - prototype_validity cell: 0x38ae00000a31 &amp;lt;Cell &lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 1&amp;gt;
 - instance descriptors &lt;span class=&#34;c1&#34;&gt;#1: 0x38ae000cef3d &amp;lt;DescriptorArray[1]&amp;gt;&lt;/span&gt;
 - transitions &lt;span class=&#34;c1&#34;&gt;#1: 0x38ae000cef99 &amp;lt;TransitionArray[4]&amp;gt;Transition array #1:&lt;/span&gt;
     0x38ae00000e05 &amp;lt;Symbol: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;elements_transition_symbol&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;transition to PACKED_DOUBLE_ELEMENTS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; -&amp;gt; 0x38ae000cefb1 &amp;lt;Map&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;16&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;PACKED_DOUBLE_ELEMENTS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;

 - prototype: 0x38ae000ce925 &amp;lt;JSArray&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&amp;gt;
 - constructor: 0x38ae000ce61d &amp;lt;JSFunction Array &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sfi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 0x38ae00335da5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;
 - dependent code: 0x38ae000006dd &amp;lt;Other heap object &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;WEAK_ARRAY_LIST_TYPE&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&amp;gt;
 - construction counter: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;1, 2, 3, , &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can see that the elements kind for this array is &lt;code&gt;HOLEY_SMI_ELEMENTS&lt;/code&gt;. SMI is used to represent small integers. and you can see that the elements after &lt;code&gt;arr[2]&lt;/code&gt; are holes.&lt;/p&gt;
&lt;p&gt;V8 uses a special object to represent these holes called &lt;code&gt;TheHole&lt;/code&gt;. It is an internal implementation which never leaks(or should never) in the JavaScript code. since this is a special object it is handled differently in various places in v8. this special handling is what lead to a lot vulnerabilities in the past.&lt;/p&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;spektre@skream:~$ fetch v8
spektre@skream:~$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; v8
spektre@skream:~/v8$ ./build/install-build-deps.sh &lt;span class=&#34;c1&#34;&gt;# Assumes you&amp;#39;re using apt&lt;/span&gt;
spektre@skream:~/v8$ git checkout f7a3499f6d7e50b227a17d2bbd96e4b59a261d3c
spektre@skream:~/v8$ gclient sync
spektre@skream:~/v8$ git apply patch.diff
spektre@skream:~/v8$ ./tools/dev/v8gen.py x64.release
spektre@skream:~/v8$ ninja -C ./out.gn/x64.release &lt;span class=&#34;c1&#34;&gt;# Release version&lt;/span&gt;
spektre@skream:~/v8$ ./tools/dev/v8gen.py x64.debug
spektre@skream:~/v8$ ninja -C ./out.gn/x64.debug &lt;span class=&#34;c1&#34;&gt;# Debug version &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;bug-analysis&#34;&gt;Bug Analysis&lt;/h3&gt;
&lt;h4 id=&#34;poc&#34;&gt;POC&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h0le&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h00le&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h0le&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rGlobal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;h00le&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h00le&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;captureStackTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;globalThis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prepareStackTrace&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;prepareStackTrace&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;deleteProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;globalThis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;stack&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;Reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;globalThis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;stack&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configurable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;writable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;enumerable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x5000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;rGlobal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;Reflect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;globalThis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;stack&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;configurable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;writable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;enumerable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;globalThis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;rGlobal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DebugPrint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h0le&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;First, we call &lt;code&gt;Error.captureStackTrace()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This function captures the current stack trace and stores it in a private symbol property.&lt;/li&gt;
&lt;li&gt;It creates a “v8 api/native accessor” (AccessorInfo) property for &lt;code&gt;stack&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In V8, AccessorInfo objects are used to store information about custom getter and setter functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Overriding &lt;code&gt;Error.prepareStackTrace&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;prepareStackTrace&lt;/code&gt; function is redefined by the user.&lt;/li&gt;
&lt;li&gt;This function is called whenever the &lt;code&gt;stack&lt;/code&gt; property of an Error object is accessed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Call &lt;code&gt;Object.defineProperty&lt;/code&gt; on &lt;code&gt;globalThis&lt;/code&gt;, &amp;ldquo;stack&amp;rdquo;, with the specified properties &lt;code&gt;{...}&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To define a property descriptor, it&amp;rsquo;s necessary to first get the current property descriptor. This action invokes &lt;code&gt;JSReceiver::GetOwnPropertyDescriptor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;stack&lt;/code&gt; is an &lt;code&gt;AccessorInfo&lt;/code&gt; (and not a standard &amp;ldquo;JavaScript accessor&amp;rdquo; represented by &lt;code&gt;AccessorPair&lt;/code&gt;), the process involves calling &lt;code&gt;Object::GetProperty&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This leads to the invocation of the user-defined &lt;code&gt;Error.prepareStackTrace&lt;/code&gt; function, which formats the stack trace.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Invoke the user-defined &lt;code&gt;Error.prepareStackTrace&lt;/code&gt; function during the execution of &lt;code&gt;Object.defineProperty&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delete the Old &amp;lsquo;stack&amp;rsquo; Property&lt;/strong&gt;: Remove the existing &lt;code&gt;stack&lt;/code&gt; property from &lt;code&gt;globalThis&lt;/code&gt;, using its &lt;code&gt;configurable&lt;/code&gt; attribute set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define a New &amp;lsquo;stack&amp;rsquo; Data Property&lt;/strong&gt;: Create a new &lt;code&gt;stack&lt;/code&gt; data property on &lt;code&gt;globalThis&lt;/code&gt;. This property is made &lt;code&gt;writable&lt;/code&gt; but &lt;code&gt;non-configurable&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transition PropertyCell Type&lt;/strong&gt;: Modify the &lt;code&gt;stack&lt;/code&gt; property to change its PropertyCell type to &lt;code&gt;kMutable&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trigger TurboFan Optimization&lt;/strong&gt;: Optimize the function loading &lt;code&gt;stack&lt;/code&gt; with TurboFan (V8&amp;rsquo;s optimizing compiler), due to the new status of &lt;code&gt;stack&lt;/code&gt; as a &lt;code&gt;non-configurable&lt;/code&gt; and &lt;code&gt;mutable&lt;/code&gt; property.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Optimize LoadGlobal Operation&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Optimize the LoadGlobal operation to load from a &lt;code&gt;HeapConstant PropertyCell&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bypass De-optimization Checks&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;No lazy de-optimization compilation dependencies are installed during this process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the user-defined &lt;code&gt;Error.prepareStackTrace&lt;/code&gt; function completes, &lt;code&gt;Object.defineProperty()&lt;/code&gt; continues with the descriptor returned earlier (which does not reflect the changes made inside &lt;code&gt;Error.prepareStackTrace&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;stack&lt;/code&gt; property is updated to &lt;code&gt;{value: 1, configurable: true}&lt;/code&gt;, contradicting the non-configurable state assumed by the JIT-optimized code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upon deletion of the &lt;code&gt;stack&lt;/code&gt; property, the PropertyCell is cleared and transitions into a state with a value known as &amp;ldquo;The Hole&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TurboFan-optimized function then tries to access the &lt;code&gt;stack&lt;/code&gt; property, expecting a non-configurable, mutable property. Instead, it retrieves the cleared PropertyCell, which now contains &amp;ldquo;The Hole&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patch-analysis&#34;&gt;Patch Analysis&lt;/h3&gt;
&lt;p&gt;There were two fixes for this bug.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://chromium-review.googlesource.com/c/v8/v8/&amp;#43;/4417690&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Patch 1&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span class=&#34;gh&#34;&gt;diff --git [a/src/builtins/builtins-error.cc](https://chromium.googlesource.com/v8/v8/+/f7a3499f6d7e50b227a17d2bbd96e4b59a261d3c/src/builtins/builtins-error.cc) [b/src/builtins/builtins-error.cc](https://chromium.googlesource.com/v8/v8/+/fa81078cca6964def7a3833704e0dba7b05065d8/src/builtins/builtins-error.cc)
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;index 01e0162..14c0602 100644
&lt;/span&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;--- a/src/builtins/builtins-error.cc
&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+++ b/src/builtins/builtins-error.cc
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;gu&#34;&gt;@@ -35,6 +35,9 @@
&lt;/span&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;     THROW_NEW_ERROR_RETURN_FAILURE(
         isolate, NewTypeError(MessageTemplate::kInvalidArgument, object_obj));
   }
&lt;span class=&#34;gi&#34;&gt;+  if (object_obj-&amp;gt;IsJSGlobalProxy()) {
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+    return ReadOnlyRoots(isolate).undefined_value();
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+  }
&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;&lt;/span&gt; 
   Handle&amp;lt;JSObject&amp;gt; object = Handle&amp;lt;JSObject&amp;gt;::cast(object_obj);
   Handle&amp;lt;Object&amp;gt; caller = args.atOrUndefined(isolate, 2);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This introduced a simple check to return &lt;code&gt;undefined&lt;/code&gt; value If &lt;code&gt;object_obj&lt;/code&gt; is a &lt;code&gt;JSGlobalProxy&lt;/code&gt;
I think this patch was a temporary fix as they introduced another patch after few days for a better fix&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://chromium-review.googlesource.com/c/v8/v8/&amp;#43;/4459251&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Patch 2&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;The patch notes itself is pretty much self explanatory here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[error] Define Error.stack property as a JavaScript accessor

... instead of the native data property.
This fixes the JS spec violation when reading a data property does not
expect any observable side effects. For example, OrdinaryGetOwnProperty
(see [https://tc39.es/ecma262/#sec-ordinarygetownproperty](https://tc39.es/ecma262/#sec-ordinarygetownproperty), step 4a).

Differences to previous behaviour:
- Error.stack is defined as a JavaScript accessor property.
- all Error objects get a private &amp;#34;error_stack_symbol&amp;#34; field where
  the captured stack trace is stored (previously it was added only when
  the error was actually thrown which caused unnecessary transitions).
- Error.captureStackTrace(obj) adds public &amp;#34;stack&amp;#34; accessor property
  and private &amp;#34;error_stack_symbol&amp;#34; property to given &amp;#34;obj&amp;#34;.
- calling &amp;#34;stack&amp;#34; getter/setter is a no-op in case receiver is not an
  &amp;#34;Error-like&amp;#34; object, i.e. it doesn&amp;#39;t have a &amp;#34;error_stack_symbol&amp;#34;
  property and it doesn&amp;#39;t have a prototype with such a property (the
  lookup stops at JSProxy or interceptor).
- the &amp;#34;stack&amp;#34; getter walks the prototype chain from receiver until it
  finds a holder with the &amp;#34;error_stack_symbol&amp;#34; property which is then
  used for computing the result.
  This is slightly different from the previous behaviour in case
  receiver&amp;#39;s prototype chain contains multiple error objects.
- the &amp;#34;stack&amp;#34; setter walks the prototype chain from receiver until it
  finds a holder with the &amp;#34;error_stack_symbol&amp;#34; property and stores the
  value there.
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I have learnt a lot while doing analysis for this CVE, and the next blog post will be about how this vulnerability was exploited. If you find my mistakes or have any doubts/suggestions feel free to &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/0xspektre&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;contact me&lt;/a&gt; :)&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
