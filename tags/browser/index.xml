<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Browser on spektre's Blog</title><link>https://spektre.in/tags/browser/</link><description>Recent content in Browser on spektre's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 02 Jan 2024 06:32:41 +0530</lastBuildDate><atom:link href="https://spektre.in/tags/browser/index.xml" rel="self" type="application/rss+xml"/><item><title>V8 Internals - Understanding V8 Compiler Pipeline</title><link>https://spektre.in/post/v8-internals-1/v8_internals_1/</link><pubDate>Tue, 02 Jan 2024 06:32:41 +0530</pubDate><guid>https://spektre.in/post/v8-internals-1/v8_internals_1/</guid><description>&lt;h1 id="understanding-v8s-compiler-pipeline">Understanding V8&amp;rsquo;s Compiler Pipeline&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>V8 is the JavaScript engine powering browsers like Google Chrome, Brave, and Microsoft Edge. This series of blog posts will go into the internals of V8. This first part will be giving an overview of the V8 Compiler Pipeline.&lt;/p>
&lt;h2 id="compiler-pipeline">Compiler Pipeline&lt;/h2>
&lt;p>&lt;img src="V8_Internals_1/Untitled-2023-08-13-1007.png" alt="Pipeline">&lt;/p>
&lt;h3 id="high-level-overview-the-life-cycle-of-a-javascript-source-in-the-v8-engine">High-Level Overview: The Life Cycle of a JavaScript Source in the V8 Engine&lt;/h3>
&lt;p>Just-In-Time (JIT) Compilation involves executing bytecode through an interpreter VM, which is slower than running machine code directly. Most compilers, including V8, follow a similar initial compilation pipeline:&lt;/p></description></item><item><title>The Holy Hole - Analysis of CVE-2023-2033</title><link>https://spektre.in/post/cve-2023-2033/</link><pubDate>Tue, 02 Jan 2024 06:24:00 +0530</pubDate><guid>https://spektre.in/post/cve-2023-2033/</guid><description>&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>I have been following v8 exploits related to hole for sometime now and I found CVE-2023-2033 really interesting. So I thought documenting whatever I learn while doing the analysis of this CVE will help me understand it even better.&lt;/p>
&lt;h3 id="hole">Hole&lt;/h3>
&lt;p>Generally in JavaScript, A Hole to an empty slot in an array. These holes are different from &lt;code>undefined&lt;/code> or &lt;code>null&lt;/code> values, which are actual values that can be assigned to array elements.&lt;/p></description></item><item><title>Notes on CVE-2016-4622</title><link>https://spektre.in/post/cve-2016-4622/</link><pubDate>Sun, 16 Apr 2023 06:19:43 +0530</pubDate><guid>https://spektre.in/post/cve-2016-4622/</guid><description>&lt;h2 id="bug-analysis">Bug Analysis&lt;/h2>
&lt;p>The vulnerability is present in the implementation of ArrayProtoSlice.&lt;/p>
&lt;p>first, let us see what is slice method and how it works.&lt;/p>
&lt;p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; var array &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;d&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>undefined
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; array.slice&lt;span style="color:#f92672">(&lt;/span>1,4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,c,d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let us take a look at the implementation (slightly commented) of ArrayProtoSlice.&lt;/p></description></item></channel></rss>